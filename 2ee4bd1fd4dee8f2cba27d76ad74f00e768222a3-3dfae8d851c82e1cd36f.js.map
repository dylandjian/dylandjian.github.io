{"version":3,"file":"2ee4bd1fd4dee8f2cba27d76ad74f00e768222a3-3dfae8d851c82e1cd36f.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./node_modules/@chakra-ui/layout/dist/chunk-2OOHT3W5.mjs","webpack://gatsby-starter-blog/./node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs","webpack://gatsby-starter-blog/./node_modules/@chakra-ui/layout/dist/chunk-3ASUQ6PA.mjs","webpack://gatsby-starter-blog/./node_modules/@chakra-ui/layout/dist/chunk-ZFQCCYWD.mjs","webpack://gatsby-starter-blog/./node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs","webpack://gatsby-starter-blog/./node_modules/@chakra-ui/layout/dist/chunk-ZHMYA64R.mjs","webpack://gatsby-starter-blog/./node_modules/@chakra-ui/layout/dist/chunk-5VJV6UNA.mjs","webpack://gatsby-starter-blog/./node_modules/@chakra-ui/react-children-utils/dist/index.mjs","webpack://gatsby-starter-blog/./node_modules/camelcase/index.js","webpack://gatsby-starter-blog/../src/image-utils.ts","webpack://gatsby-starter-blog/../src/components/hooks.ts","webpack://gatsby-starter-blog/../src/components/layout-wrapper.tsx","webpack://gatsby-starter-blog/../src/components/picture.tsx","webpack://gatsby-starter-blog/../src/components/placeholder.tsx","webpack://gatsby-starter-blog/../src/components/main-image.tsx","webpack://gatsby-starter-blog/../src/components/gatsby-image.server.tsx","webpack://gatsby-starter-blog/../src/components/gatsby-image.browser.tsx","webpack://gatsby-starter-blog/../src/components/static-image.server.tsx","webpack://gatsby-starter-blog/../src/components/static-image.tsx","webpack://gatsby-starter-blog/./src/components/Layout.tsx"],"sourcesContent":["'use client';\n\n// src/text.tsx\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { compact } from \"@chakra-ui/object-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Text = forwardRef(function Text2(props, ref) {\n  const styles = useStyleConfig(\"Text\", props);\n  const {\n    className,\n    align,\n    decoration,\n    casing,\n    ...rest\n  } = omitThemingProps(props);\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing\n  });\n  return /* @__PURE__ */jsx(chakra.p, {\n    ref,\n    className: cx(\"chakra-text\", props.className),\n    ...aliasedProps,\n    ...rest,\n    __css: styles\n  });\n});\nText.displayName = \"Text\";\nexport { Text };","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0) delete clone[key];\n  }\n  return clone;\n}\nexport { compact };","'use client';\n\nimport { Stack } from \"./chunk-ZHMYA64R.mjs\";\n\n// src/stack/h-stack.tsx\nimport { forwardRef } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar HStack = forwardRef((props, ref) => /* @__PURE__ */jsx(Stack, {\n  align: \"center\",\n  ...props,\n  direction: \"row\",\n  ref\n}));\nHStack.displayName = \"HStack\";\nexport { HStack };","'use client';\n\n// src/stack/stack-item.tsx\nimport { chakra } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar StackItem = props => /* @__PURE__ */jsx(chakra.div, {\n  className: \"chakra-stack__item\",\n  ...props,\n  __css: {\n    display: \"inline-block\",\n    flex: \"0 0 auto\",\n    minWidth: 0,\n    ...props[\"__css\"]\n  }\n});\nStackItem.displayName = \"StackItem\";\nexport { StackItem };","// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\"base\", \"sm\", \"md\", \"lg\", \"xl\", \"2xl\"]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map(item => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj) {\n  let bps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : breakpoints;\n  const result = bps.map(br => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  const lastItem = result[result.length - 1];\n  while (lastItem === null) result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values) {\n  let bps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : breakpoints;\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null) return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj) {\n  let bps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : breakpoints;\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every(key => bps.includes(key));\n}\nvar isCustomBreakpoint = v => Number.isNaN(Number(v));\nexport { breakpoints, mapResponsive, objectToArrayNotation, arrayToObjectNotation, isResponsiveObjectLike, isCustomBreakpoint };","'use client';\n\nimport { StackItem } from \"./chunk-ZFQCCYWD.mjs\";\nimport { getDividerStyles } from \"./chunk-5VJV6UNA.mjs\";\n\n// src/stack/stack.tsx\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { cloneElement, Fragment, useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar Stack = forwardRef((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props;\n  const direction = isInline ? \"row\" : directionProp != null ? directionProp : \"column\";\n  const dividerStyle = useMemo(() => getDividerStyles({\n    spacing,\n    direction\n  }), [spacing, direction]);\n  const hasDivider = !!divider;\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider;\n  const clones = useMemo(() => {\n    const validChildren = getValidChildren(children);\n    return shouldUseChildren ? validChildren : validChildren.map((child, index) => {\n      const key = typeof child.key !== \"undefined\" ? child.key : index;\n      const isLast = index + 1 === validChildren.length;\n      const wrappedChild = /* @__PURE__ */jsx(StackItem, {\n        children: child\n      }, key);\n      const _child = shouldWrapChildren ? wrappedChild : child;\n      if (!hasDivider) return _child;\n      const clonedDivider = cloneElement(divider, {\n        __css: dividerStyle\n      });\n      const _divider = isLast ? null : clonedDivider;\n      return /* @__PURE__ */jsxs(Fragment, {\n        children: [_child, _divider]\n      }, key);\n    });\n  }, [divider, dividerStyle, hasDivider, shouldUseChildren, shouldWrapChildren, children]);\n  const _className = cx(\"chakra-stack\", className);\n  return /* @__PURE__ */jsx(chakra.div, {\n    ref,\n    display: \"flex\",\n    alignItems: align,\n    justifyContent: justify,\n    flexDirection: direction,\n    flexWrap: wrap,\n    gap: hasDivider ? void 0 : spacing,\n    className: _className,\n    ...rest,\n    children: clones\n  });\n});\nStack.displayName = \"Stack\";\nexport { Stack };","'use client';\n\n// src/stack/stack.utils.tsx\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\";\nfunction getDividerStyles(options) {\n  const {\n    spacing,\n    direction\n  } = options;\n  const dividerStyles = {\n    column: {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\"\n    },\n    \"column-reverse\": {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\"\n    },\n    row: {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0\n    },\n    \"row-reverse\": {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0\n    }\n  };\n  return {\n    \"&\": mapResponsive(direction, value => dividerStyles[value])\n  };\n}\nexport { getDividerStyles };","// src/index.ts\nimport { Children, isValidElement } from \"react\";\nfunction getValidChildren(children) {\n  return Children.toArray(children).filter(child => isValidElement(child));\n}\nexport { getValidChildren };","'use strict';\n\nconst preserveCamelCase = string => {\n  let isLastCharLower = false;\n  let isLastCharUpper = false;\n  let isLastLastCharUpper = false;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n      string = string.slice(0, i) + '-' + string.slice(i);\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n      string = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n    }\n  }\n  return string;\n};\nconst camelCase = (input, options) => {\n  if (!(typeof input === 'string' || Array.isArray(input))) {\n    throw new TypeError('Expected the input to be `string | string[]`');\n  }\n  options = Object.assign({\n    pascalCase: false\n  }, options);\n  const postProcess = x => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n  if (Array.isArray(input)) {\n    input = input.map(x => x.trim()).filter(x => x.length).join('-');\n  } else {\n    input = input.trim();\n  }\n  if (input.length === 0) {\n    return '';\n  }\n  if (input.length === 1) {\n    return options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n  }\n  const hasUpperCase = input !== input.toLowerCase();\n  if (hasUpperCase) {\n    input = preserveCamelCase(input);\n  }\n  input = input.replace(/^[_.\\- ]+/, '').toLowerCase().replace(/[_.\\- ]+(\\w|$)/g, (_, p1) => p1.toUpperCase()).replace(/\\d+(\\w|$)/g, m => m.toUpperCase());\n  return postProcess(input);\n};\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {SERVER ? <NativeScriptLoading /> : null}\n      </Fragment>\n    )\n  }\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import React, { ReactNode } from 'react'\nimport { Link } from 'gatsby'\nimport { StaticImage } from 'gatsby-plugin-image'\nimport { Text, HStack } from '@chakra-ui/react'\n\nfunction Contact() {\n  return (\n    <HStack spacing={4} marginLeft=\"auto\">\n      <Link to=\"https://github.com/dylandjian\">\n        <StaticImage\n          layout=\"fixed\"\n          src=\"../../static/github.svg\"\n          alt=\"GitHub\"\n          width={28}\n          height={28}\n        />\n      </Link>\n      <Link to=\"https://twitter.com/dylandjian\">\n        <StaticImage\n          layout=\"fixed\"\n          src=\"../../static/x.svg\"\n          alt=\"X\"\n          width={28}\n          height={28}\n        />\n      </Link>\n      <Link to=\"https://www.linkedin.com/in/dylan-djian\">\n        <StaticImage\n          layout=\"fixed\"\n          src=\"../../static/linkedin.svg\"\n          alt=\"LinkedIn\"\n          width={28}\n          height={28}\n        />\n      </Link>\n    </HStack>\n  )\n}\n\nfunction HomeHeader({ title }: { title: string }) {\n  return (\n    <h1 className=\"main-heading\">\n      <HStack spacing={42}>\n        <Text margin={0}>{title}</Text>\n        <Contact />\n      </HStack>\n    </h1>\n  )\n}\n\nfunction PageHeader({ title }: { title: string }) {\n  return (\n    <Link className=\"header-link-home\" to=\"/\">\n      <HStack spacing={42}>\n        <Text margin={0}>{title}</Text>\n      </HStack>\n    </Link>\n  )\n}\n\nexport function Layout({\n  location,\n  title,\n  children,\n}: {\n  location: string\n  title: string\n  children: ReactNode\n}) {\n  // @ts-expect-error because PATH PREFIX not defined\n  const isRootPath = location.pathname === `${__PATH_PREFIX__}/`\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">\n        {isRootPath ? (\n          <HomeHeader title={title} />\n        ) : (\n          <PageHeader title={title} />\n        )}\n      </header>\n      <main>{children}</main>\n    </div>\n  )\n}\n"],"names":["Text","props","ref","styles","className","align","decoration","casing","rest","aliasedProps","object","clone","Object","assign","key","compact","textAlign","textDecoration","textTransform","jsx","p","cx","__css","displayName","HStack","direction","StackItem","div","display","flex","minWidth","freeze","Stack","isInline","directionProp","justify","spacing","wrap","children","divider","shouldWrapChildren","dividerStyle","useMemo","options","dividerStyles","column","my","mx","borderLeftWidth","borderBottomWidth","row","prop","mapper","value","Array","isArray","map","item","keys","reduce","result","getDividerStyles","hasDivider","shouldUseChildren","clones","validChildren","child","index","isLast","length","_child","clonedDivider","cloneElement","_divider","jsxs","Fragment","_className","alignItems","justifyContent","flexDirection","flexWrap","gap","getValidChildren","Children","toArray","filter","isValidElement","camelCase","input","TypeError","pascalCase","x","trim","join","toUpperCase","toLowerCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","slice","preserveCamelCase","replace","_","p1","m","charAt","module","exports","N","height","HTMLImageElement","prototype","W","e","t","a","Boolean","images","fallback","src","gatsbyImageData","gatsbyImage","childImageSharp","j","r","u","loading","shouldLoad","style","opacity","O","n","s","o","l","backgroundColor","width","position","top","left","bottom","right","objectFit","objectPosition","d","transition","z","D","_ref5","layout","paddingTop","maxWidth","alt","role","A","c","q","P","H","srcSet","decoding","G","sources","sizes","_ref6","media","type","V","propTypes","isRequired","B","F","Error","U","Y","_len","arguments","_key","h","apply","concat","X","image","J","Z","K","Set","Q","ee","te","as","class","g","onStartLoad","onLoad","onError","f","w","y","b","v","E","M","k","S","$","I","JSON","stringify","then","_ref7","renderImageToString","swapPlaceholderImage","current","querySelector","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","add","has","_ref8","innerHTML","isLoading","isLoaded","requestAnimationFrame","cancelAnimationFrame","dangerouslySetInnerHTML","__html","suppressHydrationWarning","ae","ie","re","_len2","_key2","ne","se","oe","__imageData","__error","console","warn","Contact","React","marginLeft","Link","to","StaticImage","require","HomeHeader","_ref","title","margin","PageHeader","_ref2","Layout","_ref3","location","isRootPath","pathname"],"sourceRoot":""}